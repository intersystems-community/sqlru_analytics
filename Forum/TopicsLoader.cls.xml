<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Forum.TopicsLoader">
<Description>
Initial topic loader </Description>
<Super>Forum.TopicsPage</Super>
<TimeCreated>63776,59960.045951</TimeCreated>

<Method name="Load">
<Description>
Entry point</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>forum="cache"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc = 1

	if ##class(Forum).NameExists( forum, .forumId ) {
		
		#;s sc = ##class(Forum).NameDelete( forum ) Q:'sc sc
		#; 5803,"Forum.Topic" ERROR #5803: Can't get exclusive lock
		#; 
		#; workaround:
		s sc = ..DeletePosts( forumId ) Q:'sc sc
		s sc = ..DeleteTopics( forumId ) Q:'sc sc
		
	} else {
		
		k data s data("Name") = forum 
		w !, "Create new forum: ", forum 
		s sc = ##class(Forum).Insert( .data ) 
		w " forum created! ", sc
		Q:'sc sc
		
	}
	
	w !,"Load Topics... "
	s sc = ..Scan( forum ) 
	if 'sc w sc Q sc
	
	w !,"Load Topic Posts ... "
	s sc = ..LoadPosts( forum ) 
	if 'sc w sc Q sc
	
	w !,"Update Authors... "
	s sc = ..UpdateAuthors( forum ) 
	w sc 
	
	w !,"Creating TimeLapse... ",!
	s sc = ##class(History.TimeLapse).Insert(forum, .tl)
	w sc
	Q sc
]]></Implementation>
</Method>

<Method name="Scan">
<Description>
Scan across all forum topic pages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>forum="cache"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s sc = 1, i = 1 
	s page = ..GetPage( forum, i, .sc ) Q:'sc sc
	s pages = page.Pages() Q:pages=0 $$$ERROR($$$GeneralError,"Can't parse pages count ") 
	
	while i <= pages {
		
		s sc = page.Parse() Q:'sc
		w !, "Page #", i, " successfuly loaded", !
		s i = i + 1, sc = page.Get( , i ) ;load next page #i in parser  
		Q:'sc 
		
	}
	Q sc
]]></Implementation>
</Method>

<Method name="DeleteTopics">
<ClassMethod>1</ClassMethod>
<FormalSpec>forum,verbose=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	w:verbose !, "Delete old topics..." 
	s sql = "Select ID From Forum.Topic Where Forum = ?"
	s rs = ##class(%SQL.Statement).%ExecDirect( , sql, forum )
	s sc = 1
	while rs.%Next(){
		s sc = sc && ##class(Forum.Topic).%DeleteId( rs.ID )
		Q:'sc	
	}
	w:verbose " Deleted! ", sc,!
	Q sc
]]></Implementation>
</Method>

<Method name="DeletePosts">
<ClassMethod>1</ClassMethod>
<FormalSpec>forum,verbose=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	w:verbose !, "Delete old posts..." 
	s sql = "Select ID From Forum.Post Where Topic->Forum = ?"
	s rs = ##class(%SQL.Statement).%ExecDirect( , sql, forum)
	s sc = 1
	while rs.%Next() {
		s sc = sc && ##class(Forum.Post).%DeleteId( rs.ID )
		Q:'sc	
	}
	w:verbose " Deleted! ", sc
	Q sc
]]></Implementation>
</Method>

<Method name="LoadPosts">
<ClassMethod>1</ClassMethod>
<FormalSpec>forum,verbose=1</FormalSpec>
<Implementation><![CDATA[
	s sql = "Select ExtId,Pages From Forum.Topic Where Forum->Name = ? "
	s rs = ##class(%SQL.Statement).%ExecDirect(,sql, forum)
	s sc = 1, ok = 1
	while rs.%Next(){
		k data s data("topic") = rs.ExtId, data("pages")=rs.Pages
		#; ExtId = 349188 - long long topic
		w:verbose !,"Topic ", data("topic")
		s sc = ##class(Forum.PostsLoader).Load(.data)
		s ok = ok && sc
	}
	Q ok
]]></Implementation>
</Method>

<Method name="UpdateAuthors">
<ClassMethod>1</ClassMethod>
<FormalSpec>forum,verbose=1</FormalSpec>
<Implementation><![CDATA[
	s sql = "Select Distinct AuthorId From Forum.Post "
		_" Where Topic->Forum->Name = ? "
	s rs = ##class(%SQL.Statement).%ExecDirect(,sql, forum)
	s sc = 1, ok = 1 
	
	s geocoder = ..Geocoder()
	
	while rs.%Next(){
		
		s sc = ..UpdateAuthorLocation( rs.AuthorId, geocoder, verbose)
	
		
	}
	
	Q ok
]]></Implementation>
</Method>

<Method name="UpdateAuthorLocation">
<ClassMethod>1</ClassMethod>
<FormalSpec>author,geocoder="",verbose=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc = ##class(Forum.AuthorPage).Parse( .author ) ;parse location
	s location = $g(author("Location")) if location = "" Q 1
	
	s point = ##class(Forum.Author).LocationCache( location ), cache = 1
	if point="" {
		s point = ..Geolocation( location, geocoder, .sc ), cache = 0
	}
	
	s name = ##class(Forum.Author).NameGetStored( author )
	w:verbose !, name, ": ", location, " -> ", point 
	w:verbose&&cache " ( cache )"
	
	s latitude = $p( point, " " ), longitude = $p(point, " ", 2)
	s sc = ##class(Forum.Author).SetLocation( author, location, latitude, longitude )
	Q sc
]]></Implementation>
</Method>

<Method name="Geolocation">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[location,geocoder="",&sc:%Status]]></FormalSpec>
<Implementation><![CDATA[
	if $g(location) ="" Q:""
	s:'$IsObject(geocoder) geocoder = ..Geocoder()
	
	s page = "/1.x/"
	d geocoder.SetParam("geocode", location )
	d geocoder.SetParam("kind", "locality" )
	d geocoder.SetParam("format", "json" )
	d geocoder.SetParam("results", 1 )
	
	s sc = geocoder.Get( page ) 
	Q:'sc ""
	
	s strm = ##class(%Stream.FileCharacter).%New()
	s sc = strm.CopyFrom( geocoder.HttpResponse.Data )
	
	#define point "Point"":{""pos"":"""
	s pos = strm.FindAt(1, $$$point ) 
	s pos = pos + $l( $$$point )
	s sc = strm.MoveTo( pos )
	s point = strm.ReadLine()
	s point = $p(point, """")
	Q point
]]></Implementation>
</Method>

<Method name="Geocoder">
<ClassMethod>1</ClassMethod>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	s gc = ##class(%Net.HttpRequest).%New()
	s sslConfigName = "geocode-maps.yandex.ru"
	s gc.Server = sslConfigName
	s sc = ..SSLConfig( sslConfigName ) if 'sc {
		w !, "SSLConfig error: ", sc 	
	}
	s gc.SSLConfiguration = sslConfigName
	s gc.Https=1
	Q gc
]]></Implementation>
</Method>

<Method name="SSLConfig">
<Description>
Check or create default ssl config</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>config="geocode-maps.yandex.ru"</FormalSpec>
<Implementation><![CDATA[
	/// Quit with namespace restoring
	#define QUIT s $namespace = ns Q sc
	
	s ns = $namespace,  $namespace = "%SYS"
	s sc = ##class(Security.SSLConfigs).Exists( config ) if sc $$$QUIT
	
	s config("CAFile")=""
	s config("CAPath")=""
	s config("CRLFile")=""
	s config("CertificateFile")=""
	s config("CipherList")="ALL:!aNULL:!eNULL:!EXP:!SSLv2"
	s config("Description")=""
	s config("Enabled")=1
	s config("PrivateKeyFile")=""
	s config("PrivateKeyPassword")=""
	s config("PrivateKeyType")=2
	s config("Protocols")=7
	s config("Type")=0
	s config("VerifyDepth")=9
	s config("VerifyPeer")=0
	
 	s sc = ##class(Security.SSLConfigs).Create( config, .config ) 
 	if 'sc $$$QUIT
 	s ssl = ##class(Security.SSLConfigs).%OpenId( config, ,.sc )
 	if 'sc $$$QUIT
 	s sc = ssl.Activate()
 	
 	$$$QUIT
]]></Implementation>
</Method>

<Method name="OnTopic">
<Description><![CDATA[
Event handler 
<var>data</var> - key-value array with topic properties 
If handler return 0, parsing will be interrupted]]></Description>
<FormalSpec><![CDATA[&data]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Q:'##class(Forum).NameExists( ..Forum, .forumId ) 0
	s data("Forum") = forumId

	s topic = $g(data("ExtId")), pages = $g(data("PagesAmount"))
	
	k author s author("Name") = data("Author")
	s author("ExtId") = $g(data("Author","ExtId"))
	s sc = ##class(Forum.Author).GetOrSet( .author ) Q:'sc sc
	s data("AuthorId") = author
	
	s sc = ##class(Topic).Insert( .data ) 
	#; any TopicsPage may have repeated first topic 
	if 'sc && ( $system.Status.GetErrorCodes( sc ) = 5808 ) {
		Q 1
	}

	w:..Verbose $g(data), " " ;output topic id (not ExtId)
	
	Q sc
]]></Implementation>
</Method>
</Class>
</Export>
