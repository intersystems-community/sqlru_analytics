<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="test.Forum.PostsLoader">
<Super>test.view</Super>
<TimeCreated>63875,48003.13317</TimeCreated>

<Method name="OnBeforeAllTests">
<Description>
change property visibility for test purpose</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s def = "Forum.PostsLoader", def("property","firstPost","Private") = 0
	Q ##class(test.util).ClassDefChange( .def )
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<Description>
restore property visibility</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s def = "Forum.PostsLoader", def("property","firstPost","Private") = 1
	Q ##class(test.util).ClassDefChange( .def )
]]></Implementation>
</Method>

<Method name="TestScan">
<Description>
this code is smell - should be one action in the one method</Description>
<Implementation><![CDATA[
	/* *************************************************************************
	
	#1 - first action, for example: TestScan1
	If there was not the topic
	Find Id of last authors that was before load of posts = authorsLastId
	Create forum and topic with only required test properties and topic("ExtId")
	Load all posts
	Delete forum, topic, posts
	Remove authors Id greater than authorsLastId
	
	#2 - another test - method 
	If there was the topic with external id = topic("ExtId")
	First find all posts of topic with external id = topic("ExtId")
	Find how many there were posts = postsAmount and then delete all posts of this topic
	Load all posts
	After posts load, remove all but the first postsAmount
	
	******************************************************************************/
	
	s topic("ExtId") = 1184176 //Page of this topic "http://www.sql.ru/forum/1184176/"
		
	if '##class(Forum.Topic).ExtIdExists( topic("ExtId"), .topic ) {	
	
		#; NOTE: should be a classmethod of Forum.Author
		s sql = "Select Count(Id) As Amount From Forum.Author" 
		s rs = ##class(%SQL.Statement).%ExecDirect( ,sql )
		if rs.%Next() s authorsAmount = rs.Amount
		
		s authorsLastId = 0
		if ( authorsAmount > 0 ) {		
			#; NOTE: ClassMethod of Forum.Author
			s sql = "Select Top ? Id From Forum.Author Order By Id Desc" 
			s rs = ##class(%SQL.Statement).%ExecDirect(,sql,1)
			if rs.%Next() s authorsLastId = rs.Id
		} 
				
		#; Creating forum
		s forum("Name") = "Testing forum's name"

		if '##class(Forum.Forum).NameExists( forum("Name"), .forum ){
			
			&sql( Insert Into Forum.Forum ( Name ) Values ( :forum("Name") ))
			if SQLCODE=0 s forum = %ROWID
			
		}
	
		#;Creating topic - should be a classmethod of Forum.Topic
					
		s topic("Name") = "Testing topic's name"
		, topic("Author") = "Testing topic's author", topic("Views") = 12345
		, topic("Updated") = "2001-01-01 04:20:00", topic("Pages") = "a"
		
		#; NOTE: exists short form with local variable  
		#; http://docs.intersystems.com/cache20152/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL_INSERT#RSQL_C60657
		&sql( Insert Into Forum.Topic ( Name, ExtId, Forum, Author, Views, Updated, Pages ) 
		Values ( :topic("Name") ,:topic("ExtId") ,:forum ,:topic("Author") ,:topic("Views") ,:topic("Updated") ,:topic("Pages") ))
		if SQLCODE=0 s topic = %ROWID
		
		
		
	} else {	; should be in the separate method 
	
	
		s sql = "Select Count(Id) As Amount From Forum.Post Where Topic->ExtId = ?" ; should be a classmethod of Forum.Post
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		if rs.%Next() s postsAmount = rs.Amount
		
		#;Delete all posts of topic

		s sql = "Select Id From Forum.Post Where Topic->ExtId = ? " ; TODO: classmethod of Forum.Post
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		while rs.%Next(){
			s tmpId = rs.Id
			s sc = ##class(Forum.Post).%DeleteId(tmpId)
			}
		}
	
	s dataForMethod("topic") = topic("ExtId")
	s dataForMethod("pages") = "a"

	s dataForMethod("verbose") = 0 ;suppress output for json 
	
	s sc = ##class(Forum.PostsLoader).Scan(.dataForMethod)
	
	
	s status = ##class(Forum.Post).ExtIdExists(18390235, .postId)
	do $$$AssertTrue(status,"Existence of post with ExtId = 18390235")
	s status = ##class(Forum.Post).ExtIdExists(18390500, .postId)
	do $$$AssertTrue(status,"Existence of post with ExtId = 18390500")
	s status = ##class(Forum.Post).ExtIdExists(18406989, .postId)
	do $$$AssertTrue(status,"Existence of post with ExtId = 18406989")
	s status = ##class(Forum.Post).ExtIdExists(18409879, .postId)
	do $$$AssertTrue(status,"Existence of post with ExtId = 18409879")
	s status = ##class(Forum.Post).ExtIdExists(18390235, .postId)
	do $$$AssertTrue(status,"Existence of post with ExtId = 18390235")
	
	if $g(authorsLastId)'=""{
		
		#;Delete posts - class method of ....
		s sql = "Select Id From Forum.Post Where Topic->ExtId = ? "
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		while rs.%Next(){
			s tmpId = rs.Id
			s sc = ##class(Forum.Post).%DeleteId(tmpId)
		}
		#;Check posts nonexistence - class method of ....
		s sql = "Select Count(Id) As Amount From Forum.Post Where Topic->ExtId = ? "
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		if rs.%Next() s amount = rs.Amount
		do $$$AssertEquals(amount,0,"Nonexistence of posts")
		
		s status = ##class(Forum.Topic).%DeleteId(topic)
		do $$$AssertTrue(status,"Nonexistence of created topic object")
		
		s status = ##class(Forum.Forum).%DeleteId(forum)
		do $$$AssertTrue(status,"Nonexistence of created forum object")
		
		#;Delete new authors
		s sql = "Select Id From Forum.Author Where Id > ? "
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, authorsLastId)
		while rs.%Next(){
			s tmpId = rs.Id
			s sc = ##class(Forum.Author).%DeleteId(tmpId)
		}
		
		#;Check new authors nonexistence
		s sql = "Select Count(Id) As Amount From Forum.Author Where Id > ? "
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, authorsLastId)
		if rs.%Next() s amount = rs.Amount
		do $$$AssertEquals(amount,0,"Nonexistence of new authors")
		
		} else { ; another method
		
		s sql = "Select Id From Forum.Post Where Topic->ExtId = ? " ; class-method
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		s num = 0
		while rs.%Next(){
			s tmpId = rs.Id
			if num<postsAmount {
				s num = num + 1
				Continue
				}  
			s sc = ##class(Forum.Post).%DeleteId(tmpId)
		}
		
		s sql = "Select Count(Id) As Amount From Forum.Post Where Topic->ExtId = ?" ;classmethod
		s rs = ##class(%SQL.Statement).%ExecDirect(,sql, topic("ExtId"))
		if rs.%Next() s amount = rs.Amount
		do $$$AssertEquals(amount,postsAmount,"Nonexistence of new posts")				
		}
]]></Implementation>
</Method>

<Method name="TestOnPost">
<Implementation><![CDATA[
	#;Creating forum
	
	s forum("Name") = "Testing forum's name"
	
	s status = ##class(Forum.Forum).NameExists( forum("Name"), .tmpId )
	if status = 1 {
		d ##class(Forum.Forum).%DeleteId( tmpId )
		k status, tmpId
	}
		
	&sql( Insert Into Forum.Forum ( Name ) 
	Values ( :forum("Name") ))
	if SQLCODE=0 s forum = %ROWID
	s forumNotExist = 1
	
	#;Creating topic
	
	s topic("Name") = "Testing topic's name", topic("ExtId") = 0
		, topic("Author") = "Testing topic's author", topic("Views") = 12345
		, topic("Updated") = "2001-01-01 04:20:00", topic("Posted") = "2000-01-01 04:20:00"
	
	s status = ##class(Forum.Topic).ExtIdExists( topic("ExtId"), .tmpId )
	if status = 1 {
		d ##class(Forum.Topic).%DeleteId( tmpId )
		k status, tmpId
		}
		
	&sql( Insert Into Forum.Topic ( Name, ExtId, Forum, Author, Views, Updated, Posted ) 
	Values ( :topic("Name") ,:topic("ExtId") ,:forum ,:topic("Author") 
		,:topic("Views") ,:topic("Updated") ,:topic("Posted") ))
	if SQLCODE=0 s topic = %ROWID
	s topicNotExist = 1
	
	#;Creating post
	
	s post("ExtId") = 0	, post("Author") = "Testing author"
		, post("Author","ExtId") = "Testing external Id of author"
		, post("Posted") = "2000-07-01 04:20:00"
		, post("Text") = "Testing text", post("Type") = "Testing type"
	
	s status = ##class(Forum.Post).ExtIdExists( post("ExtId"), .tmpId )
	if status = 1 {
		d ##class(Forum.Post).%DeleteId( tmpId )
		k status, tmpId
		} 
	
	#; variable should be named as postLoader
	s postObj = ##class(Forum.PostsLoader).%New()
	s postObj.Topic = topic("ExtId")
	s postObj.firstPost = 1
	s postObj.Verbose = 0 
	s status = postObj.OnPost(.post)
		
	
	do $$$AssertTrue(status,"Status of method exucution")
	
	s topicObj = ##class(Forum.Topic).%OpenId(topic)
	do $$$AssertNotEquals(topicObj.Posted,topic("Posted"),"Property ""Posted"" of topic changed")
	do $$$AssertEquals(topicObj.Posted,post("Posted"),"Property ""Posted"" of topic equals property ""Posted"" of post")				
	
	s status = ##class(Forum.Post).%ExistsId(post)
	do $$$AssertTrue(status,"Existence of test post")
	s status = ##class(Forum.Post).%DeleteId(post)
	do $$$AssertTrue(status,"Delete test post")
	
	s status = ##class(Forum.Author).%ExistsId(post("AuthorId"))
	do $$$AssertTrue(status,"Existence of test author")
	s status = ##class(Forum.Author).%DeleteId(post("AuthorId"))
	do $$$AssertTrue(status,"Delete test author")
	
	if topicNotExist{
		s status = ##class(Forum.Topic).%DeleteId(topic)
		do $$$AssertTrue(status,"Delete test topic")
		}	
	
	if forumNotExist{
		s status = ##class(Forum.Forum).%DeleteId(forum)
		do $$$AssertTrue(status,"Delete test fotum")
		}
]]></Implementation>
</Method>
</Class>
</Export>
